package ec.edu.espe.AirporTaxiScheduling.view;

import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Updates;
import ec.edu.espe.AirporTaxiScheduling.controller.TraveldbController;
import ec.edu.espe.AirporTaxiScheduling.utils.FileManager;
import ec.edu.espe.AirporTaxiScheduling.controller.TaxiDriverdbController;
import ec.edu.espe.AirporTaxiScheduling.controller.TravelersdbController;
import ec.edu.espe.AirporTaxiScheduling.model.TaxiDriver;
import ec.edu.espe.AirporTaxiScheduling.model.Travel;
import ec.edu.espe.AirporTaxiScheduling.model.Traveler;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.bson.Document;
import ec.edu.espe.AirporTaxiScheduling.utils.Generator;
import javax.swing.DefaultListModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Leonardo Yaranga,Progress Team, DCCO-ESPE
 */
public class FrmTravels extends javax.swing.JFrame {

    /**
     * Creates new form FrmTravels
     */
    ArrayList<Travel> travels = new ArrayList<Travel>();
    Travel travel = new Travel();
    TraveldbController dataBaseManager = new TraveldbController();
    Traveler traveler = new Traveler();
    ArrayList<TaxiDriver> taxiDrivers = new ArrayList<TaxiDriver>();
    TaxiDriver taxiDriver = new TaxiDriver();
    ArrayList<Traveler> travelers = new ArrayList<Traveler>();

    String uri = "mongodb+srv://lyaranga:tortilla@espe2210-oopsw7996.77wv341.mongodb.net/?retryWrites=true&w=majority";
    String databaseName = "AirportTaxiScheduling";
    String collectionName = "Travels";

    public FrmTravels() {
        initComponents();
        loadDriverCombo();
        loadTravelerCombo();
        loadTarifs();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngPayed = new javax.swing.ButtonGroup();
        jCalendarTheme1 = new com.toedter.plaf.JCalendarTheme();
        pnlButtons = new javax.swing.JPanel();
        btnBack = new javax.swing.JButton();
        btnClean = new javax.swing.JButton();
        btnMainMenu = new javax.swing.JButton();
        btnAccept = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        pnlInput = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        cmbDriver = new javax.swing.JComboBox<>();
        cmbTraveler = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        chkbReminder = new javax.swing.JCheckBox();
        txtPnlAnnotation = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        chkbAnnotation = new javax.swing.JCheckBox();
        rbtnPayed = new javax.swing.JRadioButton();
        rbtnNoPayed = new javax.swing.JRadioButton();
        jdtechDateofOcurrence = new com.toedter.calendar.JSpinnerDateEditor();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtblTravels = new javax.swing.JTable();
        btnWiewTravels = new javax.swing.JButton();
        lblid = new javax.swing.JLabel();
        lblPrice = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtblTarifs = new javax.swing.JTable();
        lblDriver = new javax.swing.JLabel();
        lblTraveler = new javax.swing.JLabel();
        lblDateOfOcurrence = new javax.swing.JLabel();
        btnSetDate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnBack.setText("<-- Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnClean.setText("Clean");
        btnClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCleanActionPerformed(evt);
            }
        });

        btnMainMenu.setText("Main menu");
        btnMainMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMainMenuActionPerformed(evt);
            }
        });

        btnAccept.setText("Accept");
        btnAccept.setEnabled(false);
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.setEnabled(false);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlButtonsLayout = new javax.swing.GroupLayout(pnlButtons);
        pnlButtons.setLayout(pnlButtonsLayout);
        pnlButtonsLayout.setHorizontalGroup(
            pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonsLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(btnMainMenu)
                .addGap(38, 38, 38)
                .addComponent(btnAccept, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addComponent(btnUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDelete)
                .addGap(43, 43, 43)
                .addComponent(btnClean, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );
        pnlButtonsLayout.setVerticalGroup(
            pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonsLayout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addGroup(pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClean)
                    .addComponent(btnAccept)
                    .addComponent(btnMainMenu)
                    .addComponent(btnBack)
                    .addComponent(btnDelete)
                    .addComponent(btnUpdate))
                .addGap(22, 22, 22))
        );

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Travels");

        jLabel2.setText("Driver:");

        jLabel3.setText("Traveler:");

        txtAddress.setToolTipText("City and streets");
        txtAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAddressActionPerformed(evt);
            }
        });
        txtAddress.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAddressKeyTyped(evt);
            }
        });

        cmbDriver.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nelly", "Marco", "Leo" }));
        cmbDriver.setToolTipText("Select the driver");
        cmbDriver.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmbDriverMouseClicked(evt);
            }
        });
        cmbDriver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDriverActionPerformed(evt);
            }
        });

        cmbTraveler.setFocusCycleRoot(true);
        cmbTraveler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTravelerActionPerformed(evt);
            }
        });

        jLabel4.setText("Address:");

        jLabel5.setText("Date of Ocurrence:");

        jLabel6.setText("Price:");

        chkbReminder.setText("Stablih Reminder");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        txtPnlAnnotation.setViewportView(jTextArea1);

        chkbAnnotation.setText("Include annotation");
        chkbAnnotation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkbAnnotationActionPerformed(evt);
            }
        });

        btngPayed.add(rbtnPayed);
        rbtnPayed.setText("Payed");

        btngPayed.add(rbtnNoPayed);
        rbtnNoPayed.setText("No payed");

        jdtechDateofOcurrence.setModel(new javax.swing.SpinnerDateModel());
        jdtechDateofOcurrence.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jdtechDateofOcurrenceStateChanged(evt);
            }
        });
        jdtechDateofOcurrence.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jdtechDateofOcurrenceMouseClicked(evt);
            }
        });
        jdtechDateofOcurrence.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jdtechDateofOcurrenceKeyPressed(evt);
            }
        });

        jtblTravels.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtblTravels.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtblTravelsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jtblTravels);

        btnWiewTravels.setText("Ver las carreras existentes");
        btnWiewTravels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWiewTravelsActionPerformed(evt);
            }
        });

        jLabel7.setText("Id:");
        jLabel7.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                jLabel7ComponentAdded(evt);
            }
        });

        jtblTarifs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Quito",  new Float(25.0)},
                {"Mitad del mundo",  new Float(50.0)},
                {"Ibarra",  new Float(45.0)},
                {"Aeropuerto",  new Float(25.0)},
                {null, null},
                {null, null}
            },
            new String [] {
                "Place", "Tarif"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jtblTarifs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtblTarifsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jtblTarifs);

        btnSetDate.setText("Establecer Fecha");
        btnSetDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetDateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlInputLayout = new javax.swing.GroupLayout(pnlInput);
        pnlInput.setLayout(pnlInputLayout);
        pnlInputLayout.setHorizontalGroup(
            pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInputLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlInputLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(cmbDriver, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(lblDriver, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlInputLayout.createSequentialGroup()
                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlInputLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbTraveler, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblTraveler, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(pnlInputLayout.createSequentialGroup()
                                .addGap(168, 168, 168)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7)))
                        .addGap(27, 27, 27)
                        .addComponent(lblid, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(72, 72, 72))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInputLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(chkbReminder)
                .addGap(301, 301, 301))
            .addGroup(pnlInputLayout.createSequentialGroup()
                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInputLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlInputLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlInputLayout.createSequentialGroup()
                                .addComponent(chkbAnnotation)
                                .addGap(18, 18, 18)
                                .addComponent(txtPnlAnnotation, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlInputLayout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlInputLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(41, 41, 41)
                                .addComponent(jdtechDateofOcurrence, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlInputLayout.createSequentialGroup()
                                        .addGap(163, 163, 163)
                                        .addComponent(lblDateOfOcurrence, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlInputLayout.createSequentialGroup()
                                        .addGap(40, 40, 40)
                                        .addComponent(btnSetDate))))))
                    .addGroup(pnlInputLayout.createSequentialGroup()
                        .addGap(297, 297, 297)
                        .addComponent(btnWiewTravels))
                    .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlInputLayout.createSequentialGroup()
                                .addGap(188, 188, 188)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlInputLayout.createSequentialGroup()
                                .addGap(211, 211, 211)
                                .addComponent(rbtnPayed)
                                .addGap(29, 29, 29)
                                .addComponent(rbtnNoPayed)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlInputLayout.setVerticalGroup(
            pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInputLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel7))
                    .addComponent(lblid, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbDriver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDriver, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmbTraveler, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTraveler, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jdtechDateofOcurrence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSetDate))
                .addGap(18, 18, 18)
                .addComponent(chkbReminder)
                .addGap(18, 18, 18)
                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkbAnnotation)
                    .addComponent(txtPnlAnnotation, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtnPayed)
                    .addComponent(rbtnNoPayed, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInputLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(btnWiewTravels))
                    .addGroup(pnlInputLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(lblDateOfOcurrence, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlButtons, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        FrmTravelsMenu travelsMenu = new FrmTravelsMenu();
        this.setVisible(false);
        travelsMenu.setVisible(rootPaneCheckingEnabled);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCleanActionPerformed
        cleanForm();
    }//GEN-LAST:event_btnCleanActionPerformed

    private void btnMainMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMainMenuActionPerformed
        AirportTaxiScheduling mainMenu = new AirportTaxiScheduling();
        this.setVisible(false);
        mainMenu.setVisible(true);
    }//GEN-LAST:event_btnMainMenuActionPerformed

    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed

        int option = JOptionPane.showConfirmDialog(this, "Do you want to continue?");
        if (option == 0) {

            if (cmbDriver.getSelectedItem() == null
                    || cmbTraveler.getSelectedItem() == null
                    || txtAddress.getText().isEmpty()
                    || jdtechDateofOcurrence.getDate() == null
                    || lblPrice.getText().isEmpty()
                    || !btngPayed.isSelected(btngPayed.getSelection())) {
                JOptionPane.showMessageDialog(null, "Error, some fields are empty ");
            } else {
                    int idTraveler;
                idTraveler=obtainIdTraveler(cmbTraveler.getSelectedItem().toString());
                dataBaseManager = TraveldbController.connectToDatabase(uri, databaseName, dataBaseManager);
                TraveldbController.loadFromDatabase(travels, dataBaseManager.getDatabase(), collectionName);
                travel = new Travel(Generator.generateId(), cmbDriver.getSelectedItem().toString(),idTraveler,cmbTraveler.getSelectedItem().toString(), txtAddress.getText(), jdtechDateofOcurrence.getDate(), Float.parseFloat(lblPrice.getText()), txtPnlAnnotation.getToolTipText(), btngPayed.isSelected(rbtnPayed.getModel()));
                travels.add(travel);
                FileManager.addTravelsToJson(travels);
                TraveldbController.createOperation(travel, dataBaseManager.getDatabase(), collectionName);
                if (travel.isPayed()) {

                }

            }
        }
    }//GEN-LAST:event_btnAcceptActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int option = JOptionPane.showConfirmDialog(this, "Are you sure about that?");
        JOptionPane.showMessageDialog(this, "", String.valueOf(option), JOptionPane.WARNING_MESSAGE);
        if (option == 0) {
            TraveldbController.deleteOperation(dataBaseManager.getDatabase(), collectionName, Integer.parseInt(lblid.getText()));
            JOptionPane.showMessageDialog(null, "Document delete successfully");
            cleanForm();
        }

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        updateTravel();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddressActionPerformed

    }//GEN-LAST:event_txtAddressActionPerformed

    private void txtAddressKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAddressKeyTyped
        // TODO validate if it not a char
        char character = evt.getKeyChar();

        if (txtAddress.getText() != null) {
            btnAccept.setEnabled(true);
        }

        if (!(Character.isDigit(character)) && !(Character.isAlphabetic(character)) && (character != KeyEvent.VK_BACK_SPACE) && (character != KeyEvent.VK_DELETE) && (character != KeyEvent.VK_SPACE) && !(Character.isDigit(character)) && !(character != KeyEvent.VK_ENTER)) {
            JOptionPane.showMessageDialog(this, character + "is not accepted for Address", "Warning on input data", JOptionPane.WARNING_MESSAGE);
            evt.consume();
        }

    }//GEN-LAST:event_txtAddressKeyTyped

    private void cmbDriverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbDriverMouseClicked

    }//GEN-LAST:event_cmbDriverMouseClicked

    private void cmbDriverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDriverActionPerformed
        if (cmbDriver.getSelectedItem() != null) {
            lblDriver.setText(cmbDriver.getSelectedItem().toString());
        } else {
            JOptionPane.showMessageDialog(null, "Error");
        }
    }//GEN-LAST:event_cmbDriverActionPerformed

    private void cmbTravelerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTravelerActionPerformed

        lblTraveler.setText(cmbTraveler.getSelectedItem().toString());
    }//GEN-LAST:event_cmbTravelerActionPerformed

    private void chkbAnnotationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkbAnnotationActionPerformed
        if (chkbAnnotation.isSelected()) {
            txtPnlAnnotation.setEnabled(true);
        } else {
            txtPnlAnnotation.setEnabled(false);
        }

    }//GEN-LAST:event_chkbAnnotationActionPerformed

    private void jtblTravelsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblTravelsMouseClicked
        int row = jtblTravels.rowAtPoint(evt.getPoint());
        lblid.setText(jtblTravels.getValueAt(row, 0).toString());
        lblDriver.setText(jtblTravels.getValueAt(row, 1).toString());
        lblTraveler.setText(jtblTravels.getValueAt(row, 2).toString());
        txtAddress.setText(jtblTravels.getValueAt(row, 3).toString());
        lblPrice.setText(jtblTravels.getValueAt(row, 5).toString());

        String payed = jtblTravels.getValueAt(row, 6).toString();
        if (payed.equals("true")) {
            btngPayed.setSelected(rbtnPayed.getModel(), true);
        } else {
            btngPayed.setSelected(rbtnNoPayed.getModel(), true);
        }
        btnUpdate.setEnabled(true);
        btnDelete.setEnabled(true);
    }//GEN-LAST:event_jtblTravelsMouseClicked

    private void btnWiewTravelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWiewTravelsActionPerformed
        viewTravels();
    }//GEN-LAST:event_btnWiewTravelsActionPerformed

    private void jLabel7ComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jLabel7ComponentAdded

    }//GEN-LAST:event_jLabel7ComponentAdded

    private void jtblTarifsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblTarifsMouseClicked
        int row = jtblTarifs.rowAtPoint(evt.getPoint());
        lblPrice.setText(jtblTarifs.getValueAt(row, 1).toString());
    }//GEN-LAST:event_jtblTarifsMouseClicked

    private void jdtechDateofOcurrenceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jdtechDateofOcurrenceMouseClicked

    }//GEN-LAST:event_jdtechDateofOcurrenceMouseClicked

    private void jdtechDateofOcurrenceStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jdtechDateofOcurrenceStateChanged

    }//GEN-LAST:event_jdtechDateofOcurrenceStateChanged

    private void jdtechDateofOcurrenceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jdtechDateofOcurrenceKeyPressed

    }//GEN-LAST:event_jdtechDateofOcurrenceKeyPressed

    private void btnSetDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetDateActionPerformed
        if (jdtechDateofOcurrence.getDate() == null) {
            JOptionPane.showMessageDialog(this, "No se ha seleccionado ninguna fecha");
        } else {
            lblDateOfOcurrence.setText(jdtechDateofOcurrence.getDate().toString());
        }

    }//GEN-LAST:event_btnSetDateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmTravels.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmTravels.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmTravels.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmTravels.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmTravels().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClean;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnMainMenu;
    private javax.swing.JButton btnSetDate;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnWiewTravels;
    private javax.swing.ButtonGroup btngPayed;
    private javax.swing.JCheckBox chkbAnnotation;
    private javax.swing.JCheckBox chkbReminder;
    private javax.swing.JComboBox<String> cmbDriver;
    private javax.swing.JComboBox<String> cmbTraveler;
    private com.toedter.plaf.JCalendarTheme jCalendarTheme1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private com.toedter.calendar.JSpinnerDateEditor jdtechDateofOcurrence;
    private javax.swing.JTable jtblTarifs;
    private javax.swing.JTable jtblTravels;
    private javax.swing.JLabel lblDateOfOcurrence;
    private javax.swing.JLabel lblDriver;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblTraveler;
    private javax.swing.JLabel lblid;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JPanel pnlInput;
    private javax.swing.JRadioButton rbtnNoPayed;
    private javax.swing.JRadioButton rbtnPayed;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JScrollPane txtPnlAnnotation;
    // End of variables declaration//GEN-END:variables

    private void cleanForm() {
        lblPrice.setText("");
        lblid.setText("");
        txtAddress.setText("");
        DefaultTableModel tableOfTravels = new DefaultTableModel();
        jtblTravels.setModel(tableOfTravels);
        btnUpdate.setEnabled(false);
        btnDelete.setEnabled(false);
        btnAccept.setEnabled(false);
    }

    private void viewTravels() {
        cleanForm();
        dataBaseManager = TraveldbController.connectToDatabase(uri, databaseName, dataBaseManager);
        ArrayList<Travel> travelsView = new ArrayList<Travel>();
        Travel travelView = new Travel();
        String[] titles = {"Id", "Driver", "Traveler", "Address", "DateOfOccurrence", "Price", "Payed"};
        String[] travelsString = new String[7];
        DefaultTableModel tableOfTravels = new DefaultTableModel(null, titles);
        TraveldbController.loadFromDatabase(travelsView, dataBaseManager.getDatabase(), collectionName);

        for (int i = 0; i < travelsView.size(); i++) {
            travelsString[0] = "" + travelsView.get(i).getId() + "";
            travelsString[1] = "" + travelsView.get(i).getDriver() + "";
            travelsString[2] = "" + travelsView.get(i).getTraveler() + "";
            travelsString[3] = "" + travelsView.get(i).getAddress() + "";
            travelsString[4] = "" + travelsView.get(i).getDateOfOcurrence() + "";
            travelsString[5] = "" + travelsView.get(i).getPrice() + "";
            travelsString[6] = "" + String.valueOf(travelsView.get(i).isPayed()) + "";
            tableOfTravels.addRow(travelsString);
        }

        jtblTravels.setModel(tableOfTravels);
        jtblTravels.setDefaultEditor(Object.class, null);
    }

    private void updateTravel() {
        int idTraveler;
                idTraveler=obtainIdTraveler(cmbTraveler.getSelectedItem().toString());
        travel = new Travel(Integer.parseInt(lblid.getText()),cmbDriver.getSelectedItem().toString(), idTraveler ,cmbTraveler.getSelectedItem().toString(), txtAddress.getText(), jdtechDateofOcurrence.getDate(), Float.parseFloat(lblPrice.getText()), txtPnlAnnotation.getToolTipText(), btngPayed.isSelected(rbtnPayed.getModel()));
        MongoCollection<Document> travelsCollection = dataBaseManager.getDatabase().getCollection(collectionName);

        FindIterable<Document> result = travelsCollection.find(Filters.eq("id", travel.getId()));

        travelsCollection.updateOne(result.first(), Updates.set("driver", travel.getDriver()));
        travelsCollection.updateOne(result.first(), Updates.set("address", travel.getAddress()));
        travelsCollection.updateOne(result.first(), Updates.set("dateOfOcurrence", travel.getDateOfOcurrence()));
        travelsCollection.updateOne(result.first(), Updates.set("price", travel.getPrice()));
    }

    private void loadTravelerCombo() {
        dataBaseManager = TraveldbController.connectToDatabase(uri, databaseName, dataBaseManager);
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        TravelersdbController.loadFromDatabase(travelers, dataBaseManager.getDatabase(), "Travelers");
        comboBoxModel.addElement(null);

        for (int i = 0; i < travelers.size(); i++) {

            comboBoxModel.addElement(travelers.get(i).getId() + " " + travelers.get(i).getName() + " " + String.valueOf(travelers.get(i).getPhoneNumber()));
        }
        cmbTraveler.setModel(comboBoxModel);
    }

    private void loadTarifs() {

    }

    private void loadDriverCombo() {

        dataBaseManager = TraveldbController.connectToDatabase(uri, databaseName, dataBaseManager);
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        TaxiDriverdbController.loadFromDatabase(taxiDrivers, dataBaseManager.getDatabase(), "TaxiDriver");
        comboBoxModel.addElement(null);

        for (int i = 0; i < taxiDrivers.size(); i++) {
            comboBoxModel.addElement(taxiDrivers.get(i).getName() + " " + String.valueOf((taxiDrivers.get(i).getPhoneNumber())));
        }
        cmbDriver.setModel(comboBoxModel);
    }

    private int obtainIdTraveler(String obtainId) {
        int n = 5;
        int idTraveler;
        String id = obtainId.length() < n ? obtainId : obtainId.substring(0, n);
        char[] posicions = id.toCharArray();
        String character = "";
        for (int i = 0; i < id.length(); i++) {
            if (Character.isDigit(posicions[i])) {
                character += posicions[i];
            }
        }
        idTraveler = Integer.valueOf(character);
        return idTraveler;  
    }

}
